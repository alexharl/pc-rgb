[{"C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\index.tsx":"1","C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\api\\index.ts":"2","C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\app\\index.tsx":"3","C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\components\\control\\canvas-animate-button\\index.tsx":"4","C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\components\\canvas\\index.tsx":"5","C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\components\\control\\layer-visibility-bar\\index.tsx":"6","C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\helper\\map.ts":"7"},{"size":175,"mtime":1647873777518,"results":"8","hashOfConfig":"9"},{"size":1541,"mtime":1647872420270,"results":"10","hashOfConfig":"9"},{"size":1851,"mtime":1647873777609,"results":"11","hashOfConfig":"9"},{"size":184,"mtime":1647873777610,"results":"12","hashOfConfig":"9"},{"size":1892,"mtime":1647873777610,"results":"13","hashOfConfig":"9"},{"size":570,"mtime":1647873777610,"results":"14","hashOfConfig":"9"},{"size":102,"mtime":1647873777609,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3wf8wv",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\index.tsx",[],"C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\api\\index.ts",[],["32","33"],"C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\app\\index.tsx",["34"],"import { useEffect, useState } from 'react';\r\nimport { animate, connectSignalR, getCanvas, getComponents, layerVisibility, onDisconnected, onReceivePixels } from '../api';\r\nimport { Canvas } from '../components/canvas';\r\nimport { CanvasAnimateButton } from '../components/control/canvas-animate-button';\r\nimport { LayerVisibilityBar } from '../components/control/layer-visibility-bar';\r\n\r\nexport const PcRGB = () => {\r\n  const [connected, setConnected] = useState(false);\r\n  const [components, setComponents] = useState();\r\n  const [canvas, setCanvas] = useState();\r\n  const [pixels, setPixels] = useState();\r\n  const [layers, setLayers] = useState();\r\n\r\n  useEffect(() => {\r\n    getCanvas().then(canvasResult => {\r\n      setCanvas(canvasResult);\r\n      setPixels(canvasResult.pixels);\r\n      setLayers(canvasResult.layers);\r\n    });\r\n    getComponents().then(componentsResult => {\r\n      setComponents(componentsResult);\r\n    });\r\n\r\n    // Start the signalR connection.\r\n    connectSignalR().then(isConnected => {\r\n      setConnected(isConnected);\r\n    });\r\n  }, []);\r\n\r\n  onReceivePixels(p => {\r\n    setPixels(p);\r\n  });\r\n\r\n  onDisconnected(async () => {\r\n    setConnected(false);\r\n    return await connectSignalR().then(isConnected => {\r\n      setConnected(isConnected);\r\n      return isConnected;\r\n    });\r\n  });\r\n\r\n  if (!connected) {\r\n    return <h3>Connecting...</h3>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Canvas pixels={pixels} components={components} />\r\n      <LayerVisibilityBar\r\n        layers={layers}\r\n        setLayerVisibility={(layerId, visible) => {\r\n          layerVisibility(layerId, visible).then(canvasResult => {\r\n            if (canvasResult) {\r\n              setLayers(canvasResult.layers);\r\n            }\r\n          });\r\n        }}\r\n      />\r\n      <CanvasAnimateButton toggleAnimation={() => animate()} />\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\components\\control\\canvas-animate-button\\index.tsx",[],"C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\components\\canvas\\index.tsx",[],"C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\components\\control\\layer-visibility-bar\\index.tsx",[],"C:\\Users\\alexander.harl\\Documents\\Projects\\Privat\\PcRGB\\WebClient\\src\\helper\\map.ts",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":10,"column":10,"nodeType":"41","messageId":"42","endLine":10,"endColumn":16},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"@typescript-eslint/no-unused-vars","'canvas' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]