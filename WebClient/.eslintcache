[{"C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\index.tsx":"1","C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\app\\index.tsx":"2","C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\api\\index.ts":"3","C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\components\\control\\canvas-animate-button\\index.tsx":"4","C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\components\\control\\layer-visibility-bar\\index.tsx":"5","C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\components\\canvas\\index.tsx":"6","C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\helper\\map.ts":"7"},{"size":175,"mtime":1649800354521,"results":"8","hashOfConfig":"9"},{"size":3546,"mtime":1649801178254,"results":"10","hashOfConfig":"9"},{"size":1748,"mtime":1649801013836,"results":"11","hashOfConfig":"9"},{"size":471,"mtime":1649801178254,"results":"12","hashOfConfig":"9"},{"size":1543,"mtime":1649800795092,"results":"13","hashOfConfig":"9"},{"size":2963,"mtime":1649798650505,"results":"14","hashOfConfig":"9"},{"size":102,"mtime":1649676990229,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"9qp8rh",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\index.tsx",[],["35","36"],"C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\app\\index.tsx",["37","38"],"import { Box, Container, Drawer } from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\nimport { animate, connectSignalR, getCanvas, getComponents, layerVisibility, onAnimating, onDisconnected, onReceivePixels, onReconnected, setPixel } from '../api';\r\nimport { Canvas } from '../components/canvas';\r\nimport { CanvasAnimateButton } from '../components/control/canvas-animate-button';\r\nimport { LayerVisibilityBar } from '../components/control/layer-visibility-bar';\r\nimport { ILayer } from '../model/Layer';\r\nimport { IComponent } from '../model/Model';\r\nimport { IPixel } from '../model/Pixel';\r\nimport { IRenderer } from '../model/Renderer';\r\n\r\nexport const PcRGB = () => {\r\n  const [connected, setConnected] = useState<boolean>(false);\r\n  const [components, setComponents] = useState<IComponent[]>();\r\n  const [canvas, setCanvas] = useState<IRenderer>();\r\n  const [pixels, setPixels] = useState<IPixel[]>();\r\n  const [layers, setLayers] = useState<ILayer[]>();\r\n  const [animating, setAnimating] = useState<boolean>(false);\r\n\r\n  const loadData = () => {\r\n    getCanvas().then(canvasResult => {\r\n      if (canvasResult) {\r\n        setCanvas(canvasResult);\r\n        setAnimating(canvasResult.animating);\r\n        setPixels(canvasResult.pixels);\r\n        setLayers(canvasResult.layers);\r\n      }\r\n    });\r\n\r\n    getComponents().then(componentsResult => {\r\n      if (componentsResult) {\r\n        setComponents(componentsResult);\r\n      }\r\n    });\r\n  };\r\n\r\n  const startup = () => {\r\n    loadData();\r\n\r\n    // Start the signalR connection.\r\n    connectSignalR().then(isConnected => {\r\n      setConnected(isConnected);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    startup();\r\n  }, []);\r\n\r\n  onReceivePixels(p => {\r\n    setPixels(p);\r\n  });\r\n\r\n  onAnimating(a => {\r\n    setAnimating(a);\r\n  });\r\n\r\n  onReconnected(async () => {\r\n    setConnected(true);\r\n  });\r\n\r\n  onDisconnected(async () => {\r\n    setConnected(false);\r\n  });\r\n\r\n  const handlePixelSelected = (pixel: IPixel) => {\r\n    // TODO ist nur eine Übergangslösung\r\n    var l = layers?.find(l => l.name === 'Draw Layer');\r\n    if (l) {\r\n      setPixel(l.id, pixel.position.x, pixel.position.y);\r\n    }\r\n  };\r\n\r\n  if (!connected) {\r\n    return (\r\n      <div>\r\n        <h3>Connecting...</h3>\r\n        <button\r\n          onClick={() => {\r\n            startup();\r\n          }}\r\n        >\r\n          connect\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Box sx={{ display: 'flex', position: 'relative', paddingTop: '25px' }}>\r\n        <Box>\r\n          <Canvas pixelHeight={canvas?.size.height} pixelWidth={canvas?.size.width} pixels={pixels} components={components} onPixelSelected={handlePixelSelected} />\r\n        </Box>\r\n        <Box sx={{ marginLeft: '20px' }}>\r\n          <LayerVisibilityBar\r\n            layers={layers}\r\n            setLayerVisibility={(layerId, visible) => {\r\n              layerVisibility(layerId, visible).then(canvasResult => {\r\n                if (canvasResult) {\r\n                  setLayers(canvasResult.layers);\r\n                }\r\n              });\r\n            }}\r\n          />\r\n        </Box>\r\n        <Box sx={{ marginLeft: '20px' }}>\r\n          <CanvasAnimateButton\r\n            animating={animating}\r\n            toggleAnimation={() =>\r\n              animate().then(canvasResult => {\r\n                if (canvasResult) {\r\n                  setAnimating(canvasResult.animating);\r\n                }\r\n              })\r\n            }\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n","C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\api\\index.ts",[],"C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\components\\control\\canvas-animate-button\\index.tsx",["39"],"import { Box, Fab } from '@material-ui/core';\r\nimport { FC } from 'react';\r\n\r\nexport interface ICanvasAnimateButtonProps {\r\n  animating: boolean;\r\n  toggleAnimation: () => void;\r\n}\r\n\r\nexport const CanvasAnimateButton: FC<ICanvasAnimateButtonProps> = ({ animating, toggleAnimation }) => {\r\n  return (\r\n    <Fab onClick={() => toggleAnimation()} color={animating ? 'secondary' : 'primary'} aria-label=\"animate\">\r\n      {animating ? 'Stop' : 'Start'}\r\n    </Fab>\r\n  );\r\n};\r\n","C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\components\\control\\layer-visibility-bar\\index.tsx",["40","41","42"],"import { Box, Button, FormControlLabel, FormGroup, FormLabel, Grid, Paper, Switch, Typography } from '@material-ui/core';\r\nimport { FC } from 'react';\r\nimport { ILayer } from '../../../model/Layer';\r\n\r\nexport interface ILayerVisibilityButtonProps {\r\n  layer: ILayer;\r\n  setLayerVisibility: (visible: boolean) => void;\r\n}\r\n\r\nconst LayerVisibilityButton: FC<ILayerVisibilityButtonProps> = ({ layer, setLayerVisibility }) => {\r\n  // return <Button variant=\"contained\" onClick={() => setLayerVisibility(!layer.visible)}>{`${layer.name}  (${layer.visible ? 'ON' : 'OFF'}`}</Button>;\r\n  return <FormControlLabel control={<Switch checked={layer.visible} onChange={(e, checked) => setLayerVisibility(checked)} name={layer.name} />} label={layer.name} />;\r\n};\r\n\r\nexport interface ILayerVisibilityBarProps {\r\n  layers?: ILayer[];\r\n  setLayerVisibility: (id: string, visible: boolean) => void;\r\n}\r\n\r\nexport const LayerVisibilityBar: FC<ILayerVisibilityBarProps> = ({ layers, setLayerVisibility }) => {\r\n  return (\r\n    <Paper>\r\n      <Box sx={{ display: 'flex', flexDirection: 'column', padding: '20px' }}>\r\n        <FormLabel component=\"legend\">Layers</FormLabel>\r\n        <FormGroup>\r\n          {layers &&\r\n            layers.map(layer => {\r\n              return (\r\n                <Box>\r\n                  <LayerVisibilityButton key={layer.id} layer={layer} setLayerVisibility={visible => setLayerVisibility(layer.id, visible)} />\r\n                </Box>\r\n              );\r\n            })}\r\n        </FormGroup>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n","C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\components\\canvas\\index.tsx",["43"],"import { Box, Paper } from '@material-ui/core';\r\nimport { FC, useEffect, useRef, useState } from 'react';\r\nimport { mapValueRange } from '../../helper/map';\r\nimport { IComponent } from '../../model/Model';\r\nimport { IPixel } from '../../model/Pixel';\r\n\r\nconst useCanvas = callback => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    callback([canvas, canvas && canvas.getContext('2d')]);\r\n  }, [callback]);\r\n\r\n  return canvasRef;\r\n};\r\n\r\nexport interface ICanvasProps {\r\n  pixelWidth?: number;\r\n  pixelHeight?: number;\r\n  pixels?: IPixel[];\r\n  components?: IComponent[];\r\n  onPixelSelected?: (pixel: IPixel) => void;\r\n}\r\n\r\nexport const Canvas: FC<ICanvasProps> = ({ pixelWidth, pixelHeight, pixels, components, onPixelSelected }) => {\r\n  const pixelSize = 20;\r\n\r\n  const width = (pixelWidth || 0) * pixelSize;\r\n  const height = (pixelHeight || 0) * pixelSize;\r\n  const [ctx, setCtx] = useState<CanvasRenderingContext2D>();\r\n\r\n  const canvasRef = useCanvas(([canvas, context]) => {\r\n    setCtx(context);\r\n  });\r\n\r\n  useEffect(() => {\r\n    var pixelRadius = 10;\r\n    var pixelOffset = pixelSize;\r\n    if (ctx && pixels) {\r\n      ctx.clearRect(0, 0, width, height);\r\n      for (let i = 0; i < pixels.length; i++) {\r\n        const pixel = pixels[i];\r\n\r\n        const hue = mapValueRange(pixel.color.hue, 0, 255, 360, 0) - 200;\r\n        const saturation = mapValueRange(pixel.color.saturation, 0, 255, 0, 100);\r\n        const brightness = 100 - mapValueRange(pixel.color.brightness, 0, 255, 0, 100);\r\n\r\n        const isComponentPixel =\r\n          components &&\r\n          components.find(c => {\r\n            return !!c.pixelPositions.find(p => {\r\n              return p.y === pixel.position.y && p.x === pixel.position.x;\r\n            });\r\n          });\r\n        let alpha = !!isComponentPixel ? 1 : 0.3;\r\n        const pixelPositionX = pixel.position.x * pixelOffset + pixelRadius + 1;\r\n        const pixelPositionY = pixel.position.y * pixelOffset + pixelRadius + 1;\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(pixelPositionX, pixelPositionY, pixelRadius, 0, 2 * Math.PI);\r\n        ctx.fillStyle = `hsl(${hue},${saturation}%, ${brightness}%, ${alpha})`;\r\n        ctx.fill();\r\n      }\r\n    }\r\n  }, [pixels, ctx, components]);\r\n\r\n  const onCanvasClick = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\r\n    if (onPixelSelected) {\r\n      const x = Math.floor(e.clientX / pixelSize);\r\n      const y = Math.floor(e.clientY / pixelSize);\r\n      const foundPixel = pixels && pixels.find(p => p.position.x === x && p.position.y === y);\r\n      if (foundPixel) {\r\n        onPixelSelected(foundPixel);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3}>\r\n      <Box sx={{ padding: 15, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n        <canvas ref={canvasRef} width={width} height={height} onClick={onCanvasClick} />\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n","C:\\Users\\alexh\\Documents\\projects\\pc-rgb\\WebClient\\src\\helper\\map.ts",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":26,"nodeType":"50","messageId":"51","endLine":1,"endColumn":32},{"ruleId":"52","severity":1,"message":"53","line":48,"column":6,"nodeType":"54","endLine":48,"endColumn":8,"suggestions":"55"},{"ruleId":"48","severity":1,"message":"56","line":1,"column":10,"nodeType":"50","messageId":"51","endLine":1,"endColumn":13},{"ruleId":"48","severity":1,"message":"57","line":1,"column":15,"nodeType":"50","messageId":"51","endLine":1,"endColumn":21},{"ruleId":"48","severity":1,"message":"58","line":1,"column":63,"nodeType":"50","messageId":"51","endLine":1,"endColumn":67},{"ruleId":"48","severity":1,"message":"59","line":1,"column":84,"nodeType":"50","messageId":"51","endLine":1,"endColumn":94},{"ruleId":"52","severity":1,"message":"60","line":66,"column":6,"nodeType":"54","endLine":66,"endColumn":31,"suggestions":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"@typescript-eslint/no-unused-vars","'Drawer' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'startup'. Either include it or remove the dependency array.","ArrayExpression",["64"],"'Box' is defined but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","'Typography' is defined but never used.","React Hook useEffect has missing dependencies: 'height' and 'width'. Either include them or remove the dependency array.",["65"],"no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [startup]",{"range":"70","text":"71"},"Update the dependencies array to be: [pixels, ctx, components, width, height]",{"range":"72","text":"73"},[1695,1697],"[startup]",[2268,2293],"[pixels, ctx, components, width, height]"]